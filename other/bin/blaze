#!/usr/bin/env bash
#
# Source:
#   https://github.com/GaugeK/dots/
#
set -x

[[ -z "$DISPLAY" ]] &&
	echo "Can't open display; exiting" && exit

tempdir="/tmp/blaze"
[[ -z "$BLAZE_DIR" ]] &&
	BLAZE_DIR="$HOME/opt/1-Recordings"

[[ -z "$BLAZE_FILENAME" ]] &&
	BLAZE_FILENAME="blaze-$(date '+%Y-%m-%d_%H-%M-%S')"

output="$BLAZE_DIR/$BLAZE_FILENAME"

[[ -d $BLAZE_DIR ]] || mkdir -p $blaze_dir
[[  -d $tempdir  ]] || mkdir -p  $tempdir

help="
GaugeK's recording script
  \e[34mhttps://github.com/GaugeK/dots/\e[0m

Variables:
  \e[34mBLAZE_FILENAME\e[0m          Changes the output filename (Make sure it's not a
                          static filename or else it will get overridden
                          every time you start a new recording)
  \e[34mBLAZE_DIR\e[0m               Changes the output directory


\e[37m[1]\e[0m = Requires one argument, if not stated no arguments are accepted
Options:
  \e[34m-h / --help\e[0m             Display what you are reading now
  \e[34m-e / --examples\e[0m         Show usage examples
  \e[34m-s / --save\e[0m             Save normal recording
                          only keep the last <X> minutes)
  \e[34m-c / --noconfirm\e[0m        Don't ask if you want to start the recording
  \e[34m-b / --bitrate\e[0m     \e[37m[1]\e[0m  Force bitrate (In megabytes)
  \e[34m-h / --help\e[0m             Print this
  \e[34m-n / --no-nvenc\e[0m         Don't use nvenc (Nvidia cards are auto-detected,
                          only do this if your nvidia card doesn't
                          support nvenc)
  \e[34m-p / --preset\e[0m      \e[37m[1]\e[0m  Use recording preset <X>
                          (Stored in ~/.config/blaze-preset-<X>)
  \e[34m-o / --output\e[0m      \e[37m[1]\e[0m  Force output file
"
examples="
Examples:
   \e[37m# Start recording and save to / load from preset 1\e[0m
  $ blaze -p 1
   \e[37m# Same as last one, but don't ask if you want to start
   \e[37m# and output to blaze_video.mp4\e[0m
  $ blaze -p 1 -c -o blaze_video
   \e[37m# Start recording, but ask for every option\e[0m
  $ blaze
   \e[37m# Save recording\e[0m
  $ blaze -s
"

opts=$(getopt -o ed:sncp:hb:o: --long example,display:,save,no-nvenc,noconfirm,preset:,help,bitrate:,output: -- "$@")
eval set -- "$opts"


while true; do
	case "$1" in
		-d|--display) DoM="Display"; display_select="$2"; shift 2;;
		-h|--help) echo -e "$help"; exit;;
		-e|--example) echo -e "$examples"; exit;;
		-n|--no-nvenc) nvenc=" "; shift 1;;
		-c|--noconfirm) RtR="Yes"; shift 1;;
		-h|--help) echo -e "$help"; shift;;
		-s|--save) SoR="save"; shift;;
		-b|--bitrate) bitrate="-b:v ${2}M"; shift 2;;
		-p|--preset) preset="$2"; shift 2;;
		-o|--output) output="$2"; shift 2;;
		--) shift; break;;
	esac
done

# Save the recording
if [[ $SoR = save ]]; then
	pkill ffmpeg;
	exit
fi


# Load the preset if ran with -p <number>
[[ -n $preset ]] &&
	[[ -f ${XDG_CONFIG_HOME:-~/.config}/blaze-preset-$preset ]] &&
	. ${XDG_CONFIG_HOME:-~/.config}/blaze-preset-$preset

if [[ -z $DoM ]]; then
	unset presets
	# Find presets
	for x in $(ls ${XDG_CONFIG_HOME:-~/.config}/blaze-preset-*); do
		presets+="\npreset-${x##*-}";
	done
	DoM="$(echo -e "Display\nSlop$presets" | \
		dmenu -i -p "Automatic dimensions from display, or select a region?")"
	# If a preset is chosen, load that
	[[ $DoM = preset* ]] && preset="${DoM##*-}"
	[[ $DoM = preset* ]] && . ${XDG_CONFIG_HOME:-~/.config}/blaze-$DoM
fi

if [[ ${DoM} = Display ]]; then
	# Get display list
	displays="$(xrandr -q --current | grep -iv "   \|disconnect\|screen" | \
		awk '{gsub("primary ", "");print $1 " " $3}')"

	if [[ -z $display_select ]]; then
		# Choose a display
		[[ $(wc -l <<< $displays) = 1 ]] && display_select="$(awk '{print $1}' <<< $displays)" ||
		display_select="$(echo -e "$displays" | awk '{print $1}' | dmenu -i -p "Display to record")"
	fi

	# Get resolution and offset of the chosen display
	read -r width height offsetX offsetY < <(echo -e "$displays" | \
		grep -i $display_select | \
		awk '{gsub("x", " "); gsub("+", " ");  print $2 " " $3 " " $4 " " $5}' )
elif [[ ${DoM} = Slop ]]; then
	# Select an area with slop
	slop="$(slop -l -c 0.64314,0.41176,0.70588,0.2 -b 1 -f '%w %h %x %y')"

	# get the size and offset of the selection
	read -r width height offsetX offsetY < <(echo -e "$slop")
	(( $width % 2 )) && width="$(( $width + 1))"
	(( $height % 2 )) && height="$(( $height + 1))"
fi

# Ask the user if they want desktop audio and what framerate
[[ -z $audio ]] && audio="$(echo -e "no\nyes" | dmenu -i -p "Desktop audio?")"
[[ -z $rate ]] && rate="$(echo -e "30\n60" | dmenu -i -p "Framerate")"
# Save preset
[[ -n $preset ]] && [[ $DoM = Display ]] &&
echo -e "
DoM=\"$DoM\"
display_select=\"$display_select\"
rate=\"$rate\"
audio=\"$audio\"
" > ${XDG_CONFIG_HOME:-~/.config}/blaze-preset-$preset &&

# add actual audio command to $audio if yes
if [[ $audio != yes ]]; then
	audio=""
fi

if [[ $audio = yes ]]; then
	audio="-f pulse -i $(pacmd list-sources | \
		grep -PB 1 "analog.*monitor>" | head -n 1 | sed 's/.* //g')"
fi


[[ -n $DoM ]] && [[ -n $rate ]] && [[ -z $RtR ]] && \
	RtR="$(echo -e "No\nYes" | dmenu -i -p "Are you ready to record?")"

# if user has a nvidia card use nvenc
[[ -n $(lspci | grep -i nvidia) ]] && [[ -z $nvenc ]] && \
	nvenc="-vcodec h264_nvenc"


if [[ $RtR = Yes ]]; then
	notify-send -t 2000 "recording started"
	ffmpeg -y $(printf " $audio") \
		-f x11grab -draw_mouse 1 \
		-s ${width}x${height} -r ${rate} -i $DISPLAY.0+${offsetX},${offsetY} \
		-pix_fmt yuv420p \
		$(printf " $bitrate")\
		-q:v 0 $(printf " $nvenc") \
		"$output".mp4 -loglevel error
	notify-send -t 2000 "recording stopped"
fi
