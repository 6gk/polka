#!/usr/bin/env bash
#
# Source:
#   https://gitlab.com/GaugeK/dots/
#

dir="$HOME/Videos/recordings"
name="$(date '+%Y-%m-%d.%H:%M:%S')" # Needs .mp4 after this is listed in the actual recording part

re="\e[31m"
gr="\e[32m"
ye="\e[33m"
cy="\e[36m"
bl="\e[34m"
pu="\e[35m"
n="\e[0m"
b="\e[1m"

help="
Gauge Krahe's ${ye}(https://gitlab.com/GaugeK)${n} ffmpeg recording script

${b}CLI Syntax: ${n} 
  \$ ${gr}record${n} <Offset X> <Offset Y> <Width> <Height> <Frames Per Second> <Desktop audio (yes|no)>${n}
  \$ ${gr}record${n} ${cy}-s ${n}<Frames Per Second> <Desktop audio (yes|no)>${n}
  \$ ${gr}record${n} ${cy}-d ${n}<Display name (ex: HDMI-0)> <Frames Per Second> <Desktop audio (yes|no)>${n}

When ran without any arguments (Or with missing arguments), it will get the (missing) options with dmenu

${b}CLI Arguments:  ${n}
  ${b}-h / --help:     ${n}  Displays what you are viewing right now
  ${b}-d / --display:  ${n}  Record selected display
  ${b}-s / --slop:     ${n}  Use slop to get region to record
  ${b}-n / --no-nvenc: ${n}  Disable nvenc (for nvidia cards)
  ${b}-c / --noconfirm:${n}  Disable confirmation to start the recording
"

[[ -d $dir ]] || mkdir -p $dir

opts=$(getopt -o d:shncgp: --long display:,slop,help,no-nvenc,noconfirm,gif,preset: -- "$@")
eval set -- "$opts"

while true; do
	case "$1" in
		-d|--display) [[ -n $2 ]] && DoM="Display" && display_select="$2"; shift 2;;
		-s|--slop) DoM="Slop"; shift 1;;
		-h|--help) echo -e "$help"; exit ;;
		-n|--no-nvenc) nvenc=" "; shift 1;;
		-c|--noconfirm) RtR="Yes"; shift 1;;
		-g|--gif) gif="yes"; shift;;
		-p|--preset) preset="$2"; shift 2;;
		--) shift; break;;
	esac
done

# Load the preset if ran with -p <number>
set -x
[[ -n $preset ]] && 
	[[ -f ~/.config/record-preset-$preset ]] &&
	. ~/.config/record-preset-$preset

if   [[ -z $1 ]] && [[ -z $DoM ]]; then
	unset presets
	for x in $(ls ~/.config/record-preset-*); do 
		presets+="\npreset-${x##*-}";
	done
	DoM="$(echo -e "Display\nSlop$presets" | dmenu -i -p "Automatic dimensions from display, or select a region?")"
	[[ $DoM = preset* ]] && preset="${DoM##*-}"
	[[ $DoM = preset* ]] && . $HOME/.config/record-$DoM
elif [[ -n $1 ]] && [[ -z $DoM ]]; then
	DoM="Manual"
fi

if [[ ${DoM} = Display ]]; then
	# Get display list
	displays="$(xrandr -q --current | grep -iv "   \|disconnect\|screen" | awk '{gsub("primary ", "");print $1 " " $3}')"
	if [[ -z $display_select ]]; then 
		# Choose a display
		display_select="$(echo -e "$displays" | awk '{print $1}' | dmenu -i -p "Display to record")"
	fi

	# Get resolution and offset of the chosen display
	display_res="$(echo -e "$displays" | grep -i $display_select | awk '{gsub("x", " "); gsub("+", " ");  print $2 " " $3 " " $4 " " $5}' )"
	width="$(echo   $display_res | awk '{print $1}' )"
	height="$(echo  $display_res | awk '{print $2}' )"
	offsetX="$(echo $display_res | awk '{print $3}' )"
	offsetY="$(echo $display_res | awk '{print $4}' )"
	# Ask the user if they want audio and what framerate
	[[ -z $rate ]] && rate="$(echo -e "30\n60"   | dmenu -i -p "Framerate")"
	audio="$(echo -e "no\nyes" | dmenu -i -p "Desktop audio?")"
elif [[ ${DoM} = Slop ]]; then
	# Select an area with slop
	slop="$(slop -l -c 0.64314,0.41176,0.70588,0.2 -b 1)"

	# get the size and offset of the selection
	slop1="$(echo $slop | awk '{ gsub("x", " "); gsub("+", " "); print}')"
	width="$(echo   $slop1 | awk '{print $1}' )"
	height="$(echo  $slop1 | awk '{print $2}' )"
	offsetX="$(echo $slop1 | awk '{print $3}' )"
	offsetY="$(echo $slop1 | awk '{print $4}' )"
	# Ask the user if they want audio and what framerate
	rate="$(echo -e "30\n60"   | dmenu -i -p "Framerate")"
	audio="$(echo -e "no\nyes" | dmenu -i -p "Desktop audio?")"
fi

# Save preset
[[ -n $preset ]] && [[ $DoM = Display ]] &&
echo -e "
DoM=\"$DoM\"
display_select=\"$display_select\"
rate=\"$rate\"
audio=\"$audio\"
" > ~/.config/record-preset-$preset

# add actual audio command to $audio if yes
if [[ $audio = yes ]]; then 
	audio="-f pulse -i $(pacmd list-sources | grep -PB 1 "analog.*monitor>" | head -n 1 | sed 's/.* //g')"
else
	audio=""
fi

[[ -n $DoM ]] && [[ -n $rate ]] && [[ -z $RtR ]] && RtR="$(echo -e "No\nYes" | dmenu -i -p "Are you ready to record?")"

# if user has a nvidia card use nvenc
[[ -n $(lspci | grep -i nvidia) ]] && [[ -z $nvenc ]] && nvenc="-vcodec h264_nvenc"

function convert_gif() {
	rm -f /tmp/palette.png
	ffmpeg -i "$dir/$name.mp4" -vf palettegen "/tmp/palette.png"
	
	ffmpeg -i "$dir/$name.mp4" -i "/tmp/palette.png" -filter_complex paletteuse -r "$rate" "$dir/$name.gif"
}

if [[ $RtR = Yes ]]; then 
	notify-send -t 2000 "recording started"

	# The actual command
	ffmpeg -y $(printf " $audio") \
		-f x11grab -draw_mouse 1 \
		-s ${width}x${height} -r ${rate} -i :0.0+${offsetX},${offsetY} \
		-qscale 0 $(printf " $nvenc") \
		"${dir}/${name}".mp4 

	[[ $gif = yes ]] && convert_gif
fi
