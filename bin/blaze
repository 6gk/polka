#!/usr/bin/env bash
#
# Source:
#   https://gitlab.com/GaugeK/dots/
#

# set -x
tempdir="/tmp/blaze"
dir="$HOME/Videos/blaze"
name="blaze-$(date '+%Y-%m-%d_%H-%M-%S')" # Needs .mp4 after this is listed in the actual recording part

[[   -d $dir   ]] || mkdir -p $dir
[[ -d $tempdir ]] || mkdir -p $tempdir

opts=$(getopt -o sr --long save,record -- "$@")
eval set -- "$opts"

while true; do
	case "$1" in
		-s|--save) SoR="save"; shift;;
		-r|--record) SoR="record"; shift;;
		--) shift; break;;
	esac
done

# Remember settings from last time
[[ -f ~/.config/blaze ]] || touch ~/.config/blaze
. ~/.config/blaze

# Get the dimensions and offset of the display
displays="$(xrandr -q --current | grep -iv "   \|disconnect\|screen" | awk '{gsub("primary ", "");print $1 " " $3}')"

[[ $display_select = "" ]] && display_select="$(echo -e "$displays" | awk '{print $1}' | dmenu -i -p "Display to record")"

display_res="$(echo -e "$displays" | grep -i $display_select | awk '{gsub("x", " "); gsub("+", " ");  print $2 " " $3 " " $4 " " $5}' )"

width="$(echo   $display_res | awk '{print $1}' )"
height="$(echo  $display_res | awk '{print $2}' )"
offsetX="$(echo $display_res | awk '{print $3}' )"
offsetY="$(echo $display_res | awk '{print $4}' )"

[[ -z $rate ]] && rate="$(echo -e "30\n60"   | dmenu -i -p "Framerate")"
[[ -z $audio ]] && audio="$(echo -e "no\nyes" | dmenu -i -p "Desktop audio?")"

[[ -z $trim ]] && trim="$(echo -e "2\n5" | dmenu -i -p "Min amount of minutes to save")"

echo -e \
"display_select=\"$display_select\"
audio=\"$audio\"
trim=\"$trim\"
rate=\"$rate\"" > ~/.config/blaze

trimm="$(( $trim * 60 ))"

if [[ $audio = yes ]]; then 
	audio="-f pulse -i $(pacmd list-sources | grep -PB 1 "analog.*monitor>" | head -n 1 | sed 's/.* //g')"
else
	unset audio
fi

[[ -n $(lspci | grep -i nvidia) ]] && [[ -z $nvenc ]] && nvenc="-vcodec h264_nvenc"


if [[ $SoR = record ]]; then

	notify-send -t 4000 "Blaze started"

	while true; do
		
		curname="snippet-$(date '+%Y-%m-%d_%H-%M-%S')"

		# Record X minutes
		ffmpeg -y $(printf " $audio") \
			-f x11grab -draw_mouse 1 \
			-s ${width}x${height} -r ${rate} -i :0.0+${offsetX},${offsetY} \
			-t $trimm \
			-qscale 0 $(printf " $nvenc") \
			/tmp/blaze/$curname.mp4
			[[ $? -gt 128 ]] && break;
		
		latest="$(ls -R1t $tempdir/*.mp4 | head -2)"
		lastone="$(echo $latest | sed '1!d')"
		lasttwo="$(echo $latest | sed '2!d')"

		# Delete every file in $tempdir but the 2 most recent ones
		for file in "$(printf $tempdir/*.mp4)"; do
			if [[ $file != $lastone ]] && [[ $file != $laattwo ]]; then
				rm $file
			fi
		done

	done

elif [[ $SoR = save ]]; then

	pkill ffmpeg 
	name="blaze-$(date '+%Y-%m-%d_%H-%M-%S')"
	ls -R1t $tempdir/*.mp4 | head -2 | sed -e "s/^/file \'/g" -e "s/$/\'/g" > /tmp/blaze_inputs.txt

	ffmpeg -f concat -safe 0 -i /tmp/blaze_inputs.txt -c copy $dir/$name.mp4

	notify-send -t 4000 "Recording saved, you might want to run the script again"

fi


#	${INSTALL} -f pulse -i 0 -f x11grab \
#		-framerate 30 -s 2560x1440 -i :0.0 -c:v h264_nvenc \
#		-preset:v llhq -profile:v high -pix_fmt nv12 -b:v 15M -acodec aac /tmp/out.mp4 &&
#
#	DATE=$(date +%Y-%d-%m-%H:%M:%S)
#	FILE="${HOME}/Videos/gloom-${DATE}.mp4"
#
#	ffmpeg -sseof -00:03:00 -i /tmp/out.mp4 -vcodec copy -acodec copy "$FILE" -loglevel quiet &&
#
#echo -e "\nSaved file ${FILE} successfully!\n"