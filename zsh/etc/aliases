#     ---
#   aliases
#     ---

alias rm="rm -i"
alias SU="sudo zsh"
alias fuck="pkill -9"
alias ss="sudo systemctl"


# Git

alias ga="git add"
alias gp="git push"
alias gs="git status"
alias gc="git commit"
alias gaa="git add -A"
alias gpf="git push -f"
alias gcm="git commit -m"
alias gca="git commit --amend"
alias gl="git log --all --decorate --oneline --graph"


# pacman/yay

#alias insa="yay -S"
#alias src="yay -Ss"
alias p="sudo pacman"
#alias ins="sudo pacman -S"
alias rem="sudo pacman -Rs"
alias upd="sudo pacman -Syu"

# make ins list pacman packages
function _ins() {
	compadd $(pacman -Ssq)
}

which compdef &>/dev/null &&
	compdef _ins ins




alias sudo="doas"
alias q="qview"
alias kills="kill -9 -1"
alias t="thunar . & disown"
alias grep="grep --color=auto"
alias td="transmission-daemon"
alias rs="pkill -SIGUSR1 sxhkd"
alias ci="xclip -selection clipboard -t image/png"
alias ls="ls -Fh --group-directories-first --color=auto"
alias yt="youtube-dl --add-metadata --embed-thumbnail --embed-subs --ignore-errors -o '%(upload_date)s-%(title)s.%(ext)s'"
alias yta="youtube-dl --add-metadata --ignore-errors --extract-audio -f bestaudio/best --audio-format mp3"

reset_cursor() { echo -en "\e[4 q"; }

mc() { mkdir -p "$1" && cd "$1"; }
bk() { cp -r $1 "$1_$(date +%Y-%m-%d_%H:%M:%S).bk"; }
tc() { transmission-remote-cli; reset_cursor; }
v() {
	# ls -la $1 | grep -i '^[a-z-]* [0-9] root'
	if [[ -e "$1" ]] && [[ "$(stat -c '%U' $1)" = root ]]; then
		sudo nvim $1
	elif [[ -e "${1%/*}" ]] && [[ "$(stat -c '%U' ${1%/*})" = root ]]; then
		sudo nvim $1
	else
		nvim $1
	fi
	reset_cursor
}

hextorgb() { printf "%d %d %d\n" 0x${1:0:2} 0x${1:2:2} 0x${1:4:2}; }
rgbtohex() { printf "%02X%02X%02X\n" $@; }

source ${XDG_CONFIG_HOME:-~/.config}/sc.sh


function cli() {
	local image="$(ls -1t $HOME/opt/Screenshots/maim/ --ignore old --ignore GPUCache | head -1)"
	xclip -selection clipboard -t image/png $HOME/opt/Screenshots/maim/$image
}





# tar

c() {
	unset opts
	exclude=""
	opts=`getopt -o x: --long exclude: -- "$@"`
	eval set -- "$opts"

	while true; do
		case $1 in
			-x|--exclude) exclude="--exclude $2"; shift 2;;
			--) shift; break;;
		esac
	done
	echo $exclude

	tar -czvf "${1##*/}_$(date +%Y-%m-%d_%H-%M-%S).tar.gz" $(printf " $exclude") $1
}

e() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xjvf $1;;
			*.tar.gz)    tar xzvf $1;;
			*.tar.xz)    tar xJvf $1;;
			*.bz2)       bunzip2 $1;;
			*.rar)       unrar xv $1;;
			*.gz)        gunzip $1;;
			*.tar)       tar xvf $1;;
			*.tbz2)      tar xvjf $1;;
			*.tgz)       tar xzvf $1;;
			*.zip)       unzip $1;;
			*.7z)        7z $1;;
			*.xz)        xz -vd $1;;
			*)           echo "The filetype '.${1/*.}' is not supported";;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}




# ffmpeg

cgif() {
	local i=( $(ffmpeg -i $1 2>&1 | grep -io "[1-9][0-9]*x" | sed 's/[a-z]//g') )

	local f="fps=30,scale=$i:-1:flags=lanczos"

	ffmpeg -i "$1" -vf "$f,palettegen" -y "/tmp/palette.png" -loglevel error
	ffmpeg -i "$1" -i "/tmp/palette.png" -lavfi "$f [x]; [x][1:v] paletteuse" \
		-y "${1%.*}.gif" -loglevel error
}





# fun

lines() {
	for ((i = 0;i < LINES*COLUMNS; i++)); { (( $RANDOM % 2 )) && echo -ne "\e[3$(( $RANDOM % 8 ))m╱" || echo -ne "\e[3$(( $RANDOM % 8 ))m╲"; }
}

lines2() {
	for ((i = 0;i < LINES*COLUMNS; i++)); { (( $RANDOM % 2 )) && echo -n ╱ || echo -n ╲; }
}

col() {
	printf '\n     '
	for c in 5 1 3 2 6 4 7; do printf "\e[3${c}m*\e[9${c}m*\e[3${c}m*\e[0m\n     "; done
	printf "\n"
}

blocks() {
	echo
	for i in {0..7}; do echo -n "\e[4${i}m  \e[0m ";	done
	echo
	for i in {0..7}; do echo -n "\e[10${i}m  \e[0m ";	done
	echo -e "\n"
}

notthing() {
	notify-send -u critical -t 99999999 '      urgent      ​'; \
	notify-send -t 99999999 '      normal      ​'; \
	notify-send -u low -t 99999999 'low'
}

inf() {
	echo
	printf "    $USER\e[38;05;16m@\e[0m$HOST\n"
	printf "\e[38;05;16mos:\e[0m    "; source /etc/os-release; printf "%s\n" "$NAME"
	printf "\e[38;05;16mpkgs:\e[0m  "; pacman -Qq | wc -l
	for i in 0 5 1 3 2 6 4 7; do echo -n "\e[9${i}m▄\e[0m ";	done
	echo; echo
}

calc() {
	echo $(($@))
}

# vim: ft=sh
